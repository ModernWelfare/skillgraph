package data_structure;

import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import util.FileReader;
import util.GraphFunctions;
import util.MatlabFileWriter;
import util.RandomGraphGenerator;

public class MainProgram {
	// list of strings to hold the results from matlab evaluations

	public static void main(String args[]) {
		// name of the folder to contain all info of a certain graph
		String graphName = "test_graph";

		// create the dir if it doesn't exist
		File dir = new File(graphName);

		if (!dir.exists()) {
			dir.mkdir();
		}

		// initialize the evaluation result list
		// generates the random graph
		int[] a = { 1, 3, 2, 3, 1, 3 };
		RandomGraphGenerator.generateRandomGraph(a, "test_graph/ground_truth");

		SkillGraph graph = new SkillGraph(
				"test_graph/ground_truth/SkillGraph.csv",
				"test_graph/ground_truth/ItemToSkillMapping.csv",
				"Example/CPT_Ranges1.csv",
				"test_graph/ground_truth/GuessAndSlipRanges.csv");

		graph.generateFakeSkill();

		graph.generateGraphFiles("test_graph/fake_graph");

		// get the number of evaluation iterations
		int iterationNum = graph.getNumberOfSkills() - 1;
		// set the current graph we're working with
		SkillGraph currentGraph = graph;
		for (int i = 0; i < iterationNum; i++) {
			String iterationNumber = "Iteration_" + Integer.toString(i + 1);

			// make the iteration directory
			File iterationDir = new File(graphName + "/" + iterationNumber);

			if (!iterationDir.exists()) {
				iterationDir.mkdirs();
			}
			currentGraph = selectBestMergedGraph(currentGraph, graphName + "/"
					+ iterationNumber);
			currentGraph.generateGraphFiles(iterationDir + "/best_graph");
		}
	}

	/**
	 * selects the best merged graph given a graph
	 * 
	 * @param graph
	 *            the graph to be merged
	 * @return the best performing merged graph
	 */
	private static SkillGraph selectBestMergedGraph(SkillGraph graph,
			String iterationDir) {
		// if the graph has only one skill, simply return the given graph
		if (graph.getNumberOfSkills() == 1) {
			return graph;
		}

		int graphIndex = 0;
		int selectedIndex = 0;
		List<String> matlabResults = new ArrayList<String>();
		List<Point> possibleMerges = GraphFunctions.getAllPossibleMerges(graph);
		List<SkillGraph> mergedGraphs = new ArrayList<SkillGraph>();

		graph.generateGraphFiles(iterationDir + "/starting_graph");

		for (Point p : possibleMerges) {
			// first create a fresh copy of the original graph
			SkillGraph mergedGraph = new SkillGraph(graph);
			// perform the merge
			mergedGraph.mergeSkills(p.x, p.y);
			// outputs the merged graphs
			mergedGraph.generateGraphFiles(iterationDir + "/"
					+ Integer.toString(possibleMerges.indexOf(p)));
			mergedGraphs.add(mergedGraph);
		}

		// evaluate the graphs and store the results
		for (SkillGraph g : mergedGraphs) {
			matlabResults.add(getGraphEvaluationResults(g, graphIndex));
			graphIndex++;
		}

		selectedIndex = selectBestResultIndex(matlabResults);

		return mergedGraphs.get(selectedIndex);
	}

	/**
	 * Selects the best graph given a list of result strings
	 * 
	 * @param matlabResults
	 *            a list of strings of matlab results
	 * @return the index of the best result string
	 */
	private static int selectBestResultIndex(List<String> matlabResults) {
		// function to be implemented by Doug
		return 0;
	}

	/**
	 * Generates a matlab file that represents the given graph, runs matlab code
	 * on the generated file and retrieves the matlab evaluation results
	 * 
	 * @param graph
	 *            the graph to be evaluated
	 * @param graphIndex
	 *            the index of the graph
	 * @return a string representing the evaluation results
	 */
	private static String getGraphEvaluationResults(SkillGraph graph,
			int graphIndex) {
		MatlabFileWriter.outPutSkillGraphMatlabFile(graph, graphIndex,
				"sampleDag.m");

		try {
			// run the matlab command on a new process
			Process p = Runtime.getRuntime().exec(
					"matlab -nodisplay -wait -nosplash -nodesktop -r \"cd bnt; "
							+ "addpath(genpathKPM(pwd)); "
							+ "cd ../matlab_scripts; "
							+ "run CreateDLMObject; " + "run Evaluation1; "
							+ "exit;\"");
			p.waitFor();
			// return the result string generated by matlab when the process is
			// done
			return FileReader.readCSVFile("results/results.txt").get(0);

		} catch (InterruptedException | IOException ex) {
			// print stack trace and exit
			ex.printStackTrace();
			System.exit(-1);
		}
		return null;
	}
}
