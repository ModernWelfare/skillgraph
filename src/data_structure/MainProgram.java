package data_structure;

import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import util.FileReader;
import util.GraphFunctions;
import util.MatlabFileWriter;
import util.RandomGraphGenerator;

public class MainProgram {
	// list of strings to hold the results from matlab evaluations

	public static void main(String args[]) {
		// initialize the evaluation result list
		// generates the random graph
		int[] a = { 2, 4, 1, 2, 1, 3 };
		RandomGraphGenerator.generateRandomGraph(a, "test_graph");

		SkillGraph graph = new SkillGraph("test_graph/SkillGraph.csv",
				"test_graph/ItemToSkillMapping.csv", "Example/CPT_Ranges1.csv",
				"test_graph/GuessAndSlipRanges.csv");

		selectBestMergedGraph(graph);
	}

	/**
	 * selects the best merged graph given a graph
	 * 
	 * @param graph
	 *            the graph to be merged
	 * @return the best performing merged graph
	 */
	private static SkillGraph selectBestMergedGraph(SkillGraph graph) {
		// if the graph has only one skill, simply return the given graph
		if (graph.getNumberOfSkills() == 1) {
			return graph;
		}

		int graphIndex = 0;
		int selectedIndex = 0;
		List<String> matlabResults = new ArrayList<String>();
		List<Point> possibleMerges = GraphFunctions.getAllPossibleMerges(graph);
		List<SkillGraph> mergedGraphs = new ArrayList<SkillGraph>();

		for (Point p : possibleMerges) {
			// first create a fresh copy of the original graph
			SkillGraph mergedGraph = new SkillGraph(graph);
			// perform the merge
			mergedGraph.mergeSkills(p.x, p.y);
			mergedGraphs.add(mergedGraph);
		}

		// evaluate the graphs and store the results
		for (SkillGraph g : mergedGraphs) {
			matlabResults.add(getGraphEvaluationResults(g, graphIndex));
			graphIndex++;
		}

		selectedIndex = selectBestResultIndex(matlabResults);

		return mergedGraphs.get(selectedIndex);
	}

	/**
	 * Selects the best graph given a list of result strings
	 * 
	 * @param matlabResults
	 *            a list of strings of matlab results
	 * @return the index of the best result string
	 */
	private static int selectBestResultIndex(List<String> matlabResults) {
		// function to be implemented by Doug
		return 0;
	}

	/**
	 * Generates a matlab file that represents the given graph, runs matlab code
	 * on the generated file and retrieves the matlab evaluation results
	 * 
	 * @param graph
	 *            the graph to be evaluated
	 * @param graphIndex
	 *            the index of the graph
	 * @return a string representing the evaluation results
	 */
	private static String getGraphEvaluationResults(SkillGraph graph,
			int graphIndex) {
		MatlabFileWriter.outPutSkillGraphMatlabFile(graph, graphIndex,
				"sampleDag.m");

		try {
			// run the matlab command on a new process
			Process p = Runtime.getRuntime().exec(
					"matlab -nodisplay -wait -nosplash -nodesktop -r \"cd bnt; "
							+ "addpath(genpathKPM(pwd)); "
							+ "cd ../matlab_scripts; "
							+ "run CreateDLMObject; " + "run Evaluation1; "
							+ "exit;\"");
			p.waitFor();
			// return the result string generated by matlab when the process is
			// done
			return FileReader.readCSVFile("results/results.txt").get(0);

		} catch (InterruptedException | IOException ex) {
			// print stack trace and exit
			ex.printStackTrace();
			System.exit(-1);
		}
		return null;
	}
}
